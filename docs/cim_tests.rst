CIM Compatibility Tests
=======================

Overview
-------------------

The CIM tests are written with a purpose of testing the compatibility of the add-on with CIM Data Models.
An add-on is said to be CIM compatible, if it fulfils the two following criteria:

1. The add-on extracts all the fields with valid values, which are marked as required by the CIM Data Model.
2. Any event for the add-on is not mapped with more than one data model.

To generate test cases only for CIM compatibility, append the following marker to pytest command:

.. code-block:: console

    -m  splunk_searchtime_cim

Test Scenarios
--------------

**1. To check whether Splunk_SA_CIM is installed on the given splunk instance**

Testcase: 

.. code-block:: python

    test_app_installed[Splunk_SA_CIM]

This test verifies if app Splunk_SA_CIM is installed or not in the given splunk instance.

**2. Testcase for each eventtype mapped with a dataset.**

Testcase: 

.. code-block:: python

    test_cim_required_fields[eventtype=<eventtype>::<dataset>]

Testcase verifies if an eventtype is mapped with the dataset, events must follow the search constrainsts of the dataset.

Workflow:

* Plugin parses tags.conf to get a list of tags for each eventtype.
* Plugin parses all the `supported datamodels <https://github.com/splunk/pytest-splunk-addon/tree/master/pytest_splunk_addon/standard_lib/data_models>`_.
* Then it gets a list of the datasets mapped with an eventtype by intersection of tags.
* Generates testcase for each eventtype.

**3. Testcases for all required, conditional and cluster fields in dataset.**

Testcase: 

.. code-block:: python

    test_cim_required_fields[eventtype=<eventtype>::<dataset>::<field_name>]

| Testcase assertions.
* There should be at least 1 event mapped with the dataset.
* Each required field is extracted in all the events mapped with the datasets.
* If there are inter dependent fields, either all fields should be extracted or none of them should be extracted *i.e ["bytes","bytes_in","bytes_out"].*
* Fields should not have values other than the expected values defined in datamodel JSON files.
* Fields must not have invalid values [" ", "-", "null", "(null)", "unknown"].

Workflow:

* For an eventtype, mapped dataset will be identified as mentioned in #2 scenario.
* Test case will be generated for each required fields of an dataset.
* To generate the test case the following properties of fields will be considered.
 * An filtering condition to filter the events, only for which the field should be verified.
 * Expected values 
 * Validation to check the values follows a proper type.
 * List of co-related fields.
* Generate the query according to the properties of the field mentioned in #3.  
* Search the query to the Splunk instance.
* Assert the assertions mentioned above".


**4. Testcase for all not_allowed_in_search fields**

Testcase: 

.. code-block:: python

    test_cim_fields_not_allowed_in_search[eventtype=<eventtype>::<dataset>]

These fields are not allowed to be extracted for the eventtype

Workflow:

* Plugin collects the list of not_allowed_in_search fields from mapped datasets and CommonFields.json
* Using search query the testcase verifies if not_allowed_in_search fields are populated in search or not.

**NOTE:** CommonFields.json contains fields which are are automatically provided by asset and identity correlation features of applications like Splunk Enterprise Security.

**5. Testcase for all not_allowed_in_props fields**

Testcase: 

.. code-block:: python

    test_cim_fields_not_allowed_in_props[searchtime_cim_fields]

Defining extractions in the configuration files is not allowed for these fields. But if these fields are automatically extracted by Splunk thats fine *i.e tag*
 
Workflow:

* Plugin gets a list of fields of type not_allowed_in_props from CommonFields.json and mapped datasets.
* Plugin gets a list of fields whose extractions are defined in props using addon_parser.
* By comparing we obtain a list of fields whose extractions are not allowed but defined.

**6. Testcase to check that eventtype is not be mapped with multiple datamodels.**

Testcase: 

.. code-block:: python

    test_eventtype_mapped_multiple_cim_datamodel

Workflow:

* Parsing tags.conf it already has a list of eventtype mapped with the datasets.
* Using SPL we check that each eventtype is not be mapped with multiple datamodels.

Testcase Troubleshooting
------------------------
If the test case fails than user can check error message and search query that is generated by tool.

